{"version":3,"sources":["components/AddTodo/AddTodo.js","components/ListItem/ListItem.js","components/List/List.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","todo","handleTodoChange","e","target","value","_this","setState","handleAddButton","props","addTodo","_this2","this","react_default","a","createElement","style","border","type","id","onChange","ref","el","onClick","React","Component","ListItem","margin","textAlign","item","edit","index","List","handleEdit","list","map","i","components_ListItem_ListItem","key","Todos","todos","editIndex","push","editTodo","components_AddTodo_AddTodo","components_List_List","App","className","components_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA2BeA,oNAvBbC,MAAQ,CACNC,KAAM,MAGRC,iBAAmB,SAACC,GAClB,IAAMF,EAAOE,EAAEC,OAAOC,MACtBC,EAAKC,SAAS,CAAEN,YAElBO,gBAAiB,WACfF,EAAKG,MAAMC,QAAQJ,EAAKN,MAAMC,MAC9BK,EAAKC,SAAS,CAACN,KAAK,8EAGb,IAAAU,EAAAC,KACT,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,kBACpBJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,GAAG,QAAQd,MAAOO,KAAKZ,MAAMC,KAAMmB,SAAUR,KAAKV,iBAAkBmB,IAAK,SAAAC,GAAE,OAAIX,EAAKV,KAAOqB,KAC9GT,EAAAC,EAAAC,cAAA,UAAQQ,QAASX,KAAKJ,iBAAtB,eAnBgBgB,IAAMC,YCoBbC,EApBE,SAACjB,GAWhB,OACEI,EAAAC,EAAAC,cAAA,MAAIC,MAXY,CAChBC,OAAO,kBACPU,OAAQ,OACRC,UAAW,SASJnB,EAAMoB,KACPhB,EAAAC,EAAAC,cAAA,UAAQQ,QAPS,WACvBd,EAAMqB,KAAKrB,EAAMsB,SAMX,QACAlB,EAAAC,EAAAC,cAAA,0BCSKiB,EAvBF,SAACvB,GAEZ,IAAMwB,EAAa,SAACF,GAClBtB,EAAMqB,KAAKC,IAGb,OACElB,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAACC,OAAQ,mBAEhBR,EAAMyB,KAAKC,IAAI,SAACN,EAAMO,GAAP,OACbvB,EAAAC,EAAAC,cAACsB,EAAD,CACEC,IAAKF,EACLL,MAAOK,EACPP,KAAMA,EACNC,KAAMG,QCeHM,6MA3BbvC,MAAQ,CACNwC,MAAQ,GACRC,UAAW,QAGb/B,QAAU,SAACT,GACT,IAAMuC,EAAQlC,EAAKN,MAAMwC,MACzBA,EAAME,KAAKzC,GACXK,EAAKC,SAAS,CAAEiC,aAGlBG,SAAU,SAACZ,GACTzB,EAAKC,SAAS,CAAEkC,UAAWV,6EAK3B,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAC6B,EAAD,CAASlC,QAASE,KAAKF,QAAS+B,UAAW7B,KAAKZ,MAAMyC,YACtD5B,EAAAC,EAAAC,cAAC8B,EAAD,CAAMX,KAAMtB,KAAKZ,MAAMwC,MAAOV,KAAMlB,KAAK+B,mBAtB7BlB,aCWLqB,mLARX,OACEjC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAACiC,EAAD,cAJUvB,aCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2af3e135.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass AddTodo extends React.Component {\r\n\r\n  state = {\r\n    todo: ''\r\n  }\r\n\r\n  handleTodoChange = (e) => {\r\n    const todo = e.target.value;\r\n    this.setState({ todo })\r\n  }\r\n  handleAddButton= ()=>{\r\n    this.props.addTodo(this.state.todo);\r\n    this.setState({todo:''});\r\n  }\r\n\r\n  render() {\r\n  return (\r\n    <div style={{ border: '1px solid red'}}>\r\n      <input type='text' id='input' value={this.state.todo} onChange={this.handleTodoChange} ref={el => this.todo = el} />\r\n      <button onClick={this.handleAddButton}>Add</button>\r\n    </div>\r\n  );\r\n}\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\n\r\nconst ListItem = (props) =>  {\r\n  const listStyle = {\r\n    border:'2px solid black', \r\n    margin: '10px', \r\n    textAlign: 'left'\r\n  }\r\n\r\n  const handleEditButton = () => {\r\n    props.edit(props.index)\r\n  }\r\n\r\n  return (\r\n    <li style={listStyle}>\r\n          {props.item}\r\n          <button onClick={handleEditButton}>Edit</button>\r\n          <button>Delete</button>\r\n    </li>\r\n  )\r\n};\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from '../ListItem'\r\n\r\nconst List = (props)=> {\r\n\r\n  const handleEdit = (index) => {\r\n    props.edit(index)\r\n  }\r\n  \r\n  return (\r\n    <ol style={{border: '1px solid navy'}}>\r\n      {\r\n        props.list.map((item, i) => (\r\n          <ListItem \r\n            key={i}\r\n            index={i} \r\n            item={item}\r\n            edit={handleEdit}\r\n           />\r\n        ))\r\n      }\r\n    </ol>\r\n  )\r\n\r\n};\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport AddTodo from './AddTodo';\r\nimport List from './List';\r\n\r\nclass Todos extends Component {\r\n  state = {\r\n    todos : [],\r\n    editIndex: null\r\n  }\r\n\r\n  addTodo = (todo) => {\r\n    const todos = this.state.todos\r\n    todos.push(todo)\r\n    this.setState({ todos})\r\n  }\r\n\r\n  editTodo= (index) => {\r\n    this.setState({ editIndex: index})\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <h1>Todo</h1>\r\n        <AddTodo addTodo={this.addTodo} editIndex={this.state.editIndex} />\r\n        <List list={this.state.todos} edit={this.editTodo} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Todos />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}